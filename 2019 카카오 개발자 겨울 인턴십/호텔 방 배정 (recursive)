# 1. 딕셔너리 활용법 : 배열의 사이즈가 너무 커진다면 딕셔너리 사용을 고려하기! 
# 2. 런타임에러의 이유를 못찾겠는 경우 : 재귀함수의 깊이 때문일수도!! ---> 재귀가능깊이 늘려주기!



###### algorithm : union - find  #######


import sys
sys.setrecursionlimit(int(1e9))

def find_parent(x):
    global parent

    if parent[x] != x:
        parent[x] = find_parent(parent[x])

    return parent[x]


def union(a, b):
    global parent

    a = find_parent(a)
    b = find_parent(b)

    if a > b:
        parent[b] = a

    else:
        parent[a] = b



# 재귀를 통해 union find 알고리즘을 구현 using dictionary
def dfs(num):
    global parent
    global answer

    goto = parent[num]

    if goto not in parent:
        answer.append(goto)
        parent[goto] = goto + 1
        return parent[goto]

    else:
        parent[num] = dfs(goto)

        
    return parent[num]

    

        

def solution(k, room_number):
    global parent
    global visited
    global answer

    answer = []
    
    parent = {}

    for num in room_number:

        # 처음 방문하는 곳이라면
        # 그 방을 배정해주면 됨
        if num not in parent:
            parent[num] = num + 1
            answer.append(num)


        # 방문했던 곳이라면
        # 재귀함수를 통해 방문하지 않은 곳까지 찾아가기!
        else:
            dfs(num)
            

    return answer
