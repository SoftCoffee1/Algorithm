# 11 14
# 9370 미확인 도착지

"""
 1. 특정 경로를 지나는 다익스트라!
 2. 경로들의 길이에 처리를 해주어서, 경로의 형태만 봐도 지났는지 여부 check 가능하게 설정!
 3. 처리 : 초기화 과정에서 특정 경로는 홀수, 나머지 경로는 짝수로 만들어 주기.
            --> 목적지까지 가는 경로 중 특정 경로를 지나는 경우와, 지나지 않는 경우가 발생할 수 있다.
            --> 이런 상황에 탐색 순서에 따라 특정 경로를 지나면서 최단경로로 갈 수 있음에도 불구하고, 확인이 안되는 경우가 생길 수도 있다.
            --> 우선순위 큐 (최소 힙) 을 이용하므로, 홀수(2k + 1 이 아닌 2k - 1)를 만들때 짝수(2k)보다 작게 만들어주면 이 문제를 해결할 수 있다.


"""


import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)


for _ in range(int(input().rstrip())):

    result = []
    
    # 교차로, 도로, 목적지 후보 개수
    n, m, t = map(int, input().rstrip().split())

    # 예술가들의 출발지, g, h
    s, g, h = map(int, input().rstrip().split())


    # 인접 리스트 형태 그래프 초기화
    graph = [[] for _ in range(n+1)]
    for _ in range(m):
        a, b, d = map(int, input().rstrip().split())

        # 특정 경로 지나면 홀수로 초기화
        if {a,b} == {g,h}:
            graph[a].append((b, 2 * d - 1))
            graph[b].append((a, 2 * d - 1))

        # 아닌 경우 짝수로 초기화
        else:
            graph[a].append((b, 2 * d))
            graph[b].append((a, 2 * d))

    # 목적지 저장하는 리스트, 저장 후 정렬해줌!
    dests = []
    for _ in range(t):
        dests.append(int(input().rstrip()))
    dests.sort()



    # 최단경로가 저장 될 배열, 다익스트라 한번 거치고 나면 최단경로가 저장이 되어 있게됨!
    # 시작점까지의 경로는 0이다.
    dist = [INF for _ in range(n+1)]
    dist[s] = 0
    
    queue = []

    heapq.heappush(queue, (dist[s], s))



    while queue:
        curCost, here = heapq.heappop(queue)
        

        for there, nextCost in graph[here]:


            # 새롭게 갈 수 있는 경로가 이미 그보다 더 짧은 경로로 도달이 가능한 경우이므로
            # 무시한다!
            if curCost + nextCost >= dist[there]:
                continue


            # 최단경로가 업데이트되는 상황에만 여기까지 넘어오므로 바로 업데이트 해주고
            # 우선순위 큐에 집어넣어준다!
            dist[there] = curCost + nextCost
            heapq.heappush(queue, (dist[there], there))

    
    for dest in dests:
        if dist[dest] & 1:
            print(dest, end=" ")

    print()
